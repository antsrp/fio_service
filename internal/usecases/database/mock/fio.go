// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/antsrp/fio_service/internal/interfaces/repository (interfaces: FIORepository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	domain "github.com/antsrp/fio_service/internal/domain"
	repository "github.com/antsrp/fio_service/internal/interfaces/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockFIORepository is a mock of FIORepository interface.
type MockFIORepository struct {
	ctrl     *gomock.Controller
	recorder *MockFIORepositoryMockRecorder
}

// MockFIORepositoryMockRecorder is the mock recorder for MockFIORepository.
type MockFIORepositoryMockRecorder struct {
	mock *MockFIORepository
}

// NewMockFIORepository creates a new mock instance.
func NewMockFIORepository(ctrl *gomock.Controller) *MockFIORepository {
	mock := &MockFIORepository{ctrl: ctrl}
	mock.recorder = &MockFIORepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFIORepository) EXPECT() *MockFIORepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockFIORepository) Add(arg0 domain.Person) *repository.RepositoryError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(*repository.RepositoryError)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockFIORepositoryMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockFIORepository)(nil).Add), arg0)
}

// Check mocks base method.
func (m *MockFIORepository) Check() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check")
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockFIORepositoryMockRecorder) Check() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockFIORepository)(nil).Check))
}

// Close mocks base method.
func (m *MockFIORepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFIORepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFIORepository)(nil).Close))
}

// Delete mocks base method.
func (m *MockFIORepository) Delete(arg0 int) (int, *repository.RepositoryError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*repository.RepositoryError)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockFIORepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFIORepository)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockFIORepository) Get(arg0, arg1 []string, arg2 int) ([]domain.Person, *repository.RepositoryError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Person)
	ret1, _ := ret[1].(*repository.RepositoryError)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFIORepositoryMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFIORepository)(nil).Get), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockFIORepository) Update(arg0 domain.Person) (int, *repository.RepositoryError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*repository.RepositoryError)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFIORepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFIORepository)(nil).Update), arg0)
}
